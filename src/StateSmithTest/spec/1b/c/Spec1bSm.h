// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

enum Spec1bSm_EventId
{
    Spec1bSm_EventId_T1 = 0,
};

enum
{
    Spec1bSm_EventIdCount = 1
};

enum Spec1bSm_StateId
{
    Spec1bSm_StateId_ROOT = 0,
    Spec1bSm_StateId_S = 1,
    Spec1bSm_StateId_S1 = 2,
    Spec1bSm_StateId_S1_1 = 3,
    Spec1bSm_StateId_S2 = 4,
    Spec1bSm_StateId_S2_1 = 5,
};

enum
{
    Spec1bSm_StateIdCount = 6
};

typedef struct Spec1bSm Spec1bSm;
typedef void (*Spec1bSm_Func)(Spec1bSm* sm);

struct Spec1bSm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum Spec1bSm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    Spec1bSm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    Spec1bSm_Func current_event_handlers[Spec1bSm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    Spec1bSm_Func current_state_exit_handler;
    
    // User variables. Can be used for inputs, outputs, user variables...
    struct
    {
        uint8_t count;
    } vars;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Spec1bSm_ctor(Spec1bSm* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Spec1bSm_start(Spec1bSm* self);

// Dispatches an event to the state machine. Not thread safe.
void Spec1bSm_dispatch_event(Spec1bSm* self, enum Spec1bSm_EventId event_id);

// Converts a state id to a string. Thread safe.
const char* Spec1bSm_state_id_to_string(const enum Spec1bSm_StateId id);

