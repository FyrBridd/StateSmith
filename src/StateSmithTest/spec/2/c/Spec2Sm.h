// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

enum Spec2Sm_EventId
{
    Spec2Sm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    Spec2Sm_EventId_EV1 = 1,
    Spec2Sm_EventId_EV2 = 2,
    Spec2Sm_EventId_EV3 = 3,
    Spec2Sm_EventId_EV4 = 4,
    Spec2Sm_EventId_EV5 = 5,
    Spec2Sm_EventId_EV6 = 6,
    Spec2Sm_EventId_EV7 = 7,
};

enum
{
    Spec2Sm_EventIdCount = 8
};

enum Spec2Sm_StateId
{
    Spec2Sm_StateId_ROOT = 0,
    Spec2Sm_StateId_DECIDE = 1,
    Spec2Sm_StateId_TEST1_DO_EVENT_TESTING = 2,
    Spec2Sm_StateId_TEST1_ROOT = 3,
    Spec2Sm_StateId_TEST1_S1 = 4,
    Spec2Sm_StateId_TEST1_S1_1 = 5,
    Spec2Sm_StateId_TEST1_S2 = 6,
    Spec2Sm_StateId_TEST2_REGULAR_EVENT_TESTING = 7,
    Spec2Sm_StateId_TEST2_ROOT = 8,
    Spec2Sm_StateId_TEST2_S1 = 9,
    Spec2Sm_StateId_TEST2_S1_1 = 10,
    Spec2Sm_StateId_TEST2_S2 = 11,
    Spec2Sm_StateId_TEST3_BEHAVIOR_ORDERING = 12,
    Spec2Sm_StateId_TEST3_ROOT = 13,
    Spec2Sm_StateId_TEST3_S1 = 14,
    Spec2Sm_StateId_TEST3_S2 = 15,
    Spec2Sm_StateId_TEST3_S3 = 16,
    Spec2Sm_StateId_TEST4_PARENT_CHILD_TRANSITIONS = 17,
    Spec2Sm_StateId_TEST4_ROOT = 18,
    Spec2Sm_StateId_TEST4_S1 = 19,
    Spec2Sm_StateId_TEST4_S10 = 20,
    Spec2Sm_StateId_TEST4_S10_1 = 21,
    Spec2Sm_StateId_TEST4_S2 = 22,
    Spec2Sm_StateId_TEST4_S20 = 23,
    Spec2Sm_StateId_TEST4_S20_1 = 24,
    Spec2Sm_StateId_TEST4_S3 = 25,
    Spec2Sm_StateId_TEST5_PARENT_CHILD_TRANSITIONS_ALIAS = 26,
    Spec2Sm_StateId_TEST5_ROOT = 27,
    Spec2Sm_StateId_TEST5_S1 = 28,
    Spec2Sm_StateId_TEST5_S2 = 29,
    Spec2Sm_StateId_TEST5_S3 = 30,
    Spec2Sm_StateId_TEST6_VARIABLES = 31,
    Spec2Sm_StateId_TEST6_ROOT = 32,
    Spec2Sm_StateId_TEST6_S1 = 33,
    Spec2Sm_StateId_TEST6_S2 = 34,
    Spec2Sm_StateId_TEST7_CHOICE = 35,
    Spec2Sm_StateId_TEST7_ROOT = 36,
    Spec2Sm_StateId_TEST7_G = 37,
    Spec2Sm_StateId_TEST7_G_S1 = 38,
    Spec2Sm_StateId_TEST7_G_S2 = 39,
    Spec2Sm_StateId_TEST7_G_S3 = 40,
    Spec2Sm_StateId_TEST7_S1 = 41,
};

enum
{
    Spec2Sm_StateIdCount = 42
};

typedef struct Spec2Sm Spec2Sm;
typedef void (*Spec2Sm_Func)(Spec2Sm* sm);

struct Spec2Sm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum Spec2Sm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func current_event_handlers[Spec2Sm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func current_state_exit_handler;
    
    // User variables. Can be used for inputs, outputs, user variables...
    struct
    {
        uint8_t count;
    } vars;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Spec2Sm_ctor(Spec2Sm* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Spec2Sm_start(Spec2Sm* self);

// Dispatches an event to the state machine. Not thread safe.
void Spec2Sm_dispatch_event(Spec2Sm* self, enum Spec2Sm_EventId event_id);

// Converts a state id to a string. Thread safe.
const char* Spec2Sm_state_id_to_string(const enum Spec2Sm_StateId id);

