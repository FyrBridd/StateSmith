// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

enum Spec2Sm_EventId
{
    Spec2Sm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    Spec2Sm_EventId_EV1 = 1,
    Spec2Sm_EventId_EV2 = 2,
    Spec2Sm_EventId_EV3 = 3,
};

enum
{
    Spec2Sm_EventIdCount = 4
};

enum Spec2Sm_StateId
{
    Spec2Sm_StateId_ROOT = 0,
    Spec2Sm_StateId_DECIDE = 1,
    Spec2Sm_StateId_TEST1_DO_EVENT_TESTING = 2,
    Spec2Sm_StateId_TEST1_ROOT = 3,
    Spec2Sm_StateId_TEST1_S1 = 4,
    Spec2Sm_StateId_TEST1_S1_1 = 5,
    Spec2Sm_StateId_TEST1_S2 = 6,
    Spec2Sm_StateId_TEST2_REGULAR_EVENT_TESTING = 7,
    Spec2Sm_StateId_TEST2_ROOT = 8,
    Spec2Sm_StateId_TEST2_S1 = 9,
    Spec2Sm_StateId_TEST2_S1_1 = 10,
    Spec2Sm_StateId_TEST2_S2 = 11,
    Spec2Sm_StateId_TEST3_BEHAVIOR_ORDERING = 12,
    Spec2Sm_StateId_TEST3_ROOT = 13,
    Spec2Sm_StateId_TEST3_S1 = 14,
    Spec2Sm_StateId_TEST3_S2 = 15,
    Spec2Sm_StateId_TEST3_S3 = 16,
};

enum
{
    Spec2Sm_StateIdCount = 17
};

typedef struct Spec2Sm Spec2Sm;
typedef void (*Spec2Sm_Func)(Spec2Sm* sm);

struct Spec2Sm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum Spec2Sm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func current_event_handlers[Spec2Sm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func current_state_exit_handler;
    
    // User variables. Can be used for inputs, outputs, user variables...
    struct
    {
        uint8_t count;
    } vars;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Spec2Sm_ctor(Spec2Sm* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Spec2Sm_start(Spec2Sm* self);

// Dispatches an event to the state machine. Not thread safe.
void Spec2Sm_dispatch_event(Spec2Sm* self, enum Spec2Sm_EventId event_id);

// Converts a state id to a string. Thread safe.
const char* Spec2Sm_state_id_to_string(const enum Spec2Sm_StateId id);

