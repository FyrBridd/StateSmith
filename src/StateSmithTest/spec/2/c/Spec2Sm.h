// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

enum Spec2Sm_EventId
{
    Spec2Sm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    Spec2Sm_EventId_EV1 = 1,
    Spec2Sm_EventId_EV10 = 2,
    Spec2Sm_EventId_EV2 = 3,
    Spec2Sm_EventId_EV3 = 4,
    Spec2Sm_EventId_EV4 = 5,
    Spec2Sm_EventId_EV5 = 6,
    Spec2Sm_EventId_EV6 = 7,
    Spec2Sm_EventId_EV7 = 8,
    Spec2Sm_EventId_EV8 = 9,
    Spec2Sm_EventId_EV9 = 10,
};

enum
{
    Spec2Sm_EventIdCount = 11
};

enum Spec2Sm_StateId
{
    Spec2Sm_StateId_ROOT = 0,
    Spec2Sm_StateId_DECIDE = 1,
    Spec2Sm_StateId_TEST1_DO_EVENT_TESTING = 2,
    Spec2Sm_StateId_TEST1_ROOT = 3,
    Spec2Sm_StateId_TEST1_S1 = 4,
    Spec2Sm_StateId_TEST1_S1_1 = 5,
    Spec2Sm_StateId_TEST1_S2 = 6,
    Spec2Sm_StateId_TEST10_CHOICE_POINT = 7,
    Spec2Sm_StateId_TEST10_A = 8,
    Spec2Sm_StateId_TEST10_A_1 = 9,
    Spec2Sm_StateId_TEST10_ROOT = 10,
    Spec2Sm_StateId_TEST10_G = 11,
    Spec2Sm_StateId_TEST10_G_S0 = 12,
    Spec2Sm_StateId_TEST10_G_S1 = 13,
    Spec2Sm_StateId_TEST10_G_S2 = 14,
    Spec2Sm_StateId_TEST10_G_S3 = 15,
    Spec2Sm_StateId_TEST10_S1 = 16,
    Spec2Sm_StateId_TEST10_S4 = 17,
    Spec2Sm_StateId_TEST2_REGULAR_EVENT_TESTING = 18,
    Spec2Sm_StateId_TEST2_ROOT = 19,
    Spec2Sm_StateId_TEST2_S1 = 20,
    Spec2Sm_StateId_TEST2_S1_1 = 21,
    Spec2Sm_StateId_TEST2_S2 = 22,
    Spec2Sm_StateId_TEST3_BEHAVIOR_ORDERING = 23,
    Spec2Sm_StateId_TEST3_ROOT = 24,
    Spec2Sm_StateId_TEST3_S1 = 25,
    Spec2Sm_StateId_TEST3_S2 = 26,
    Spec2Sm_StateId_TEST3_S3 = 27,
    Spec2Sm_StateId_TEST4_PARENT_CHILD_TRANSITIONS = 28,
    Spec2Sm_StateId_TEST4_B_AND_OTHERS = 29,
    Spec2Sm_StateId_TEST4B_LOCAL = 30,
    Spec2Sm_StateId_TEST4B_G = 31,
    Spec2Sm_StateId_TEST4B_G_1 = 32,
    Spec2Sm_StateId_TEST4C_LOCAL_TO_ALIAS = 33,
    Spec2Sm_StateId_TEST4C_G = 34,
    Spec2Sm_StateId_TEST4C_G_1 = 35,
    Spec2Sm_StateId_TEST4D_EXTERNAL = 36,
    Spec2Sm_StateId_TEST4D_G = 37,
    Spec2Sm_StateId_TEST4D_G_1 = 38,
    Spec2Sm_StateId_TEST4_DECIDE = 39,
    Spec2Sm_StateId_TEST4_ROOT = 40,
    Spec2Sm_StateId_TEST4_S1 = 41,
    Spec2Sm_StateId_TEST4_S10 = 42,
    Spec2Sm_StateId_TEST4_S10_1 = 43,
    Spec2Sm_StateId_TEST4_S2 = 44,
    Spec2Sm_StateId_TEST4_S20 = 45,
    Spec2Sm_StateId_TEST4_S20_1 = 46,
    Spec2Sm_StateId_TEST4_S3 = 47,
    Spec2Sm_StateId_TEST5_PARENT_CHILD_TRANSITIONS_ALIAS = 48,
    Spec2Sm_StateId_TEST5_ROOT = 49,
    Spec2Sm_StateId_TEST5_S1 = 50,
    Spec2Sm_StateId_TEST5_S2 = 51,
    Spec2Sm_StateId_TEST5_S3 = 52,
    Spec2Sm_StateId_TEST6_VARIABLES = 53,
    Spec2Sm_StateId_TEST6_ROOT = 54,
    Spec2Sm_StateId_TEST6_S1 = 55,
    Spec2Sm_StateId_TEST6_S2 = 56,
    Spec2Sm_StateId_TEST7_INITIAL_OR_HISTORY = 57,
    Spec2Sm_StateId_TEST7 = 58,
    Spec2Sm_StateId_TEST7__HISTORY1 = 59,
    Spec2Sm_StateId_TEST7__HISTORY1__OFF = 60,
    Spec2Sm_StateId_TEST7__HISTORY1__OFF1 = 61,
    Spec2Sm_StateId_TEST7__HISTORY1__OFF2 = 62,
    Spec2Sm_StateId_TEST7__HISTORY1__OFF3 = 63,
    Spec2Sm_StateId_TEST7__HISTORY1__ON = 64,
    Spec2Sm_StateId_TEST7__HISTORY1__ON1 = 65,
    Spec2Sm_StateId_TEST7__HISTORY1__ON2 = 66,
    Spec2Sm_StateId_TEST7__HISTORY1__ON3 = 67,
    Spec2Sm_StateId_TEST7__HISTORY2 = 68,
    Spec2Sm_StateId_TEST7__HISTORY2__S1 = 69,
    Spec2Sm_StateId_TEST7__INITIAL1 = 70,
    Spec2Sm_StateId_TEST7__INITIAL1__PARENT = 71,
    Spec2Sm_StateId_TEST7__INITIAL1__G = 72,
    Spec2Sm_StateId_TEST7__INITIAL1__G_S1 = 73,
    Spec2Sm_StateId_TEST7__INITIAL1__G_S2 = 74,
    Spec2Sm_StateId_TEST7__INITIAL1__G_S3 = 75,
    Spec2Sm_StateId_TEST7__INITIAL1__S1 = 76,
    Spec2Sm_StateId_TEST7_DECIDE = 77,
    Spec2Sm_StateId_TEST8_ENTRY_CHOICE = 78,
    Spec2Sm_StateId_TEST8_ROOT = 79,
    Spec2Sm_StateId_TEST8_G = 80,
    Spec2Sm_StateId_TEST8_G_S1 = 81,
    Spec2Sm_StateId_TEST8_G_S2 = 82,
    Spec2Sm_StateId_TEST8_G_S3 = 83,
    Spec2Sm_StateId_TEST8_S1 = 84,
    Spec2Sm_StateId_TEST9_EXIT_CHOICE = 85,
    Spec2Sm_StateId_TEST9_DECIDE = 86,
    Spec2Sm_StateId_TEST9_ROOT = 87,
    Spec2Sm_StateId_TEST9_G_S1 = 88,
    Spec2Sm_StateId_TEST9_G_S2 = 89,
    Spec2Sm_StateId_TEST9_G_S3 = 90,
    Spec2Sm_StateId_TEST9_G_S4 = 91,
    Spec2Sm_StateId_TEST9_S1 = 92,
    Spec2Sm_StateId_TEST9_S1_1 = 93,
    Spec2Sm_StateId_TEST9A_ROOT = 94,
    Spec2Sm_StateId_TEST9A_S1 = 95,
    Spec2Sm_StateId_TEST9A_S1_1 = 96,
};

enum
{
    Spec2Sm_StateIdCount = 97
};

typedef struct Spec2Sm Spec2Sm;
typedef void (*Spec2Sm_Func)(Spec2Sm* sm);

struct Spec2Sm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum Spec2Sm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func current_event_handlers[Spec2Sm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    Spec2Sm_Func current_state_exit_handler;
    
    // User variables. Can be used for inputs, outputs, user variables...
    struct
    {
        uint8_t TEST7__HISTORY1__ON_history_tracking_var;
        uint8_t TEST7__HISTORY1__OFF_history_tracking_var;
        uint8_t TEST7__HISTORY2_history_tracking_var;
        uint8_t count;
    } vars;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Spec2Sm_ctor(Spec2Sm* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Spec2Sm_start(Spec2Sm* self);

// Dispatches an event to the state machine. Not thread safe.
void Spec2Sm_dispatch_event(Spec2Sm* self, enum Spec2Sm_EventId event_id);

// Converts a state id to a string. Thread safe.
const char* Spec2Sm_state_id_to_string(const enum Spec2Sm_StateId id);

