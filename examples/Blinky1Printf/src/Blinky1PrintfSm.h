// Autogenerated with StateSmith
#pragma once
#include <stdint.h>  // this ends up in the generated .h file

enum Blinky1PrintfSm_EventId
{
    Blinky1PrintfSm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
};

enum
{
    Blinky1PrintfSm_EventIdCount = 1
};

enum Blinky1PrintfSm_StateId
{
    Blinky1PrintfSm_StateId_ROOT = 0,
    Blinky1PrintfSm_StateId_LED_OFF = 1,
    Blinky1PrintfSm_StateId_LED_ON = 2,
};

enum
{
    Blinky1PrintfSm_StateIdCount = 3
};

typedef struct Blinky1PrintfSm Blinky1PrintfSm;
typedef void (*Blinky1PrintfSm_Func)(Blinky1PrintfSm* sm);

struct Blinky1PrintfSm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum Blinky1PrintfSm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    Blinky1PrintfSm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    Blinky1PrintfSm_Func current_event_handlers[Blinky1PrintfSm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    Blinky1PrintfSm_Func current_state_exit_handler;
    
    // User variables. Can be used for inputs, outputs, user variables...
    struct
    {
        uint32_t timer_started_at_ms;  // milliseconds
    } vars;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Blinky1PrintfSm_ctor(Blinky1PrintfSm* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Blinky1PrintfSm_start(Blinky1PrintfSm* self);

// Dispatches an event to the state machine. Not thread safe.
void Blinky1PrintfSm_dispatch_event(Blinky1PrintfSm* self, enum Blinky1PrintfSm_EventId event_id);

// Converts a state id to a string. Thread safe.
const char* Blinky1PrintfSm_state_id_to_string(const enum Blinky1PrintfSm_StateId id);

