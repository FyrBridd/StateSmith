// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

enum LaserTagMenu1Sm_EventId
{
    LaserTagMenu1Sm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    LaserTagMenu1Sm_EventId_BACK_HELD = 1,
    LaserTagMenu1Sm_EventId_BACK_PRESS = 2,
    LaserTagMenu1Sm_EventId_DOWN_HELD = 3,
    LaserTagMenu1Sm_EventId_DOWN_PRESS = 4,
    LaserTagMenu1Sm_EventId_OK_PRESS = 5,
    LaserTagMenu1Sm_EventId_UP_HELD = 6,
    LaserTagMenu1Sm_EventId_UP_PRESS = 7,
};

enum
{
    LaserTagMenu1Sm_EventIdCount = 8
};

enum LaserTagMenu1Sm_StateId
{
    LaserTagMenu1Sm_StateId_ROOT = 0,
    LaserTagMenu1Sm_StateId_HOME = 1,
    LaserTagMenu1Sm_StateId_HOME1 = 2,
    LaserTagMenu1Sm_StateId_HOME2 = 3,
    LaserTagMenu1Sm_StateId_HOME3 = 4,
    LaserTagMenu1Sm_StateId_MENUS_GROUP = 5,
    LaserTagMenu1Sm_StateId_MAIN_MENU = 6,
    LaserTagMenu1Sm_StateId_MM_BACK_PRESS_EATER_OPTION = 7,
    LaserTagMenu1Sm_StateId_MM_SELECT_CLASS_OPTION = 8,
    LaserTagMenu1Sm_StateId_MM_SHOW_INFO_OPTION = 9,
    LaserTagMenu1Sm_StateId_MM_BACK_PRESS_EATER = 10,
    LaserTagMenu1Sm_StateId_MM_BACK_PRESS_EATER_1 = 11,
    LaserTagMenu1Sm_StateId_MM_BACK_PRESS_EATER_2 = 12,
    LaserTagMenu1Sm_StateId_MM_BACK_PRESS_EATER_3 = 13,
    LaserTagMenu1Sm_StateId_MM_BACK_PRESS_EATER_4 = 14,
    LaserTagMenu1Sm_StateId_MM_BACK_PRESS_EATER_5 = 15,
    LaserTagMenu1Sm_StateId_MM_SELECT_CLASS = 16,
    LaserTagMenu1Sm_StateId_MM_SC_ENGINEER = 17,
    LaserTagMenu1Sm_StateId_MM_SC_MID = 18,
    LaserTagMenu1Sm_StateId_MM_SC_ARCHER = 19,
    LaserTagMenu1Sm_StateId_MM_SC_HEAVY = 20,
    LaserTagMenu1Sm_StateId_MM_SC_WIZARD = 21,
    LaserTagMenu1Sm_StateId_MM_SC_SPY = 22,
    LaserTagMenu1Sm_StateId_MM_SHOW_INFO = 23,
    LaserTagMenu1Sm_StateId_MM_SHOW_INFO_1 = 24,
    LaserTagMenu1Sm_StateId_MM_SHOW_INFO_2 = 25,
    LaserTagMenu1Sm_StateId_MM_SHOW_INFO_3 = 26,
    LaserTagMenu1Sm_StateId_WELCOME_SCREEN = 27,
};

enum
{
    LaserTagMenu1Sm_StateIdCount = 28
};

typedef struct LaserTagMenu1Sm LaserTagMenu1Sm;
typedef void (*LaserTagMenu1Sm_Func)(LaserTagMenu1Sm* sm);

struct LaserTagMenu1Sm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum LaserTagMenu1Sm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    LaserTagMenu1Sm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    LaserTagMenu1Sm_Func current_event_handlers[LaserTagMenu1Sm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    LaserTagMenu1Sm_Func current_state_exit_handler;
    
    // User variables. Can be used for inputs, outputs, user variables...
    struct
    {
        uint8_t option_value;
        uint8_t back_press_eat_count;
        uint32_t timer1_started_at_ms;
    } vars;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void LaserTagMenu1Sm_ctor(LaserTagMenu1Sm* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void LaserTagMenu1Sm_start(LaserTagMenu1Sm* self);

// Dispatches an event to the state machine. Not thread safe.
void LaserTagMenu1Sm_dispatch_event(LaserTagMenu1Sm* self, enum LaserTagMenu1Sm_EventId event_id);

